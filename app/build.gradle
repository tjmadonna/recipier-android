apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-parcelize"
apply plugin: "kotlin-kapt"
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "dagger.hilt.android.plugin"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.inelasticcollision.recipelink"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 21
        versionName "3.0"

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // View binding
        buildFeatures {
            viewBinding true
        }

        // Room
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }

        // Room
        sourceSets {
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        }

        // Import signing keys from keystore.properties file
        def keystorePropertiesFile = rootProject.file("keystore.properties")
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                storeFile rootProject.file(keystoreProperties["ReleaseStoreFile"])
                storePassword keystoreProperties["ReleaseStorePassword"]
                keyAlias keystoreProperties["ReleaseKeyAlias"]
                keyPassword keystoreProperties["ReleaseKeyPassword"]
                v1SigningEnabled true
                v2SigningEnabled true
            }
        }
    }

    // Import api keys from apikeys.properties file
    def apiKeysPropertiesFile = rootProject.file("apikeys.properties")
    def apiKeysProperties = new Properties()
    apiKeysProperties.load(new FileInputStream(apiKeysPropertiesFile))

    buildTypes.each {
        it.buildConfigField "String", "NETWORK_SERVICE_API_KEY", apiKeysProperties["NetworkServiceApiKey"]
        it.buildConfigField "String", "NETWORK_SERVICE_RECIPE_INFO_ROUTE", apiKeysProperties["NetworkServiceRecipeInfoRoute"]
        it.buildConfigField "String", "NETWORK_SERVICE_BASE_URL", apiKeysProperties["NetworkServiceBaseUrl"]
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [appName: "@string/recipier_debug"]
            minifyEnabled false
        }
        release {
            manifestPlaceholders = [appName: "@string/recipier_release"] // Set release app name
            minifyEnabled true // Enable code shrinking, obfuscation, and optimization
            shrinkResources true // Enable resource shrinking

            // Default ProGuard rules files that are packaged with the Android Gradle plugin
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release // Set signing
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    // Include the testShared directory in both the test and androidTest
    sourceSets {
        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }
    }

    // Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // For Kotlin
    kotlinOptions {
        jvmTarget = "1.8"
    }

    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")

    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "com.google.android.material:material:1.2.1"

    // Multidex
    implementation "androidx.multidex:multidex:2.0.1"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Kotlin coroutines
    def coroutinesVersion = "1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // Coil
    implementation "io.coil-kt:coil:1.1.0"

    // Lifecycle components
    def lifecycleVersion = "2.2.0"
    def archVersion = "2.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    testImplementation "androidx.arch.core:core-testing:$archVersion"

    // Room
    def roomVersion = "2.2.5"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

    // Moshi
    def moshiVersion = "1.11.0"
    implementation "com.squareup.moshi:moshi-kotlin:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    // Retrofit
    def retrofitVersion = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navVersion"
    androidTestImplementation "androidx.navigation:navigation-testing:$navVersion"

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"

    def hiltLifecycleVersion = "1.0.0-alpha02"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hiltLifecycleVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltLifecycleVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:4.13.1"
    testImplementation "org.mockito:mockito-core:3.3.3"

    // Android Testing Support Library"s runner and rules
    androidTestImplementation "androidx.test:runner:1.3.0"
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"

    // Espresso UI Testing dependencies.
    def espressoVersion = "3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
}